<%
  const modelKeyLower = modelKey.toLowerCase();
%>

import model from "../model";

<% if(model['x-apis'].includes('findAndCountAll')) { %>
/**
 * 查询多条信息
 */
const findAndCountAll = async (ctx, next) => {
  const { pageNum = 1, pageSize = 10, sorter, ...where } = ctx.query;
  let order = [];
  if (Array.isArray(sorter)) {
    order = [...sorter.map(item => item.split("__"))];
  } else if (sorter) {
    order = [sorter.split("__")];
  }
  const { count, rows } = await model.<%- modelKey -%>.findAndCountAll({
    where,
    offset: (pageNum - 1) * pageSize,
    limit: pageSize,
    order,
    include: [],
  });
  ctx.body = { count, rows };

  next();
};
<% } %>


<% if(model['x-apis'].includes('findByPk')) { %>
/**
 * 根据主键查询单条信息
 */
const findByPk = async (ctx, next) => {
  const <%- modelKeyLower -%> = await model.<%- modelKey -%>.findByPk(ctx.params.id);
  ctx.assert(<%- modelKeyLower -%>, 404, "记录不存在");
  ctx.body = <%- modelKeyLower -%>;

  next();
};
<% } %>


<% if(model['x-apis'].includes('singleCreate')) { %>
/**
 * 创建单条信息
 */
const singleCreate = async (ctx, next) => {
  ctx.body = await model.<%- modelKey -%>.create(ctx.request.body);

  next();
};
<% } %>


<% if(model['x-apis'].includes('bulkCreate')) { %>
/**
 * 创建多条信息
 */
const bulkCreate = async (ctx, next) => {
  ctx.body = await model.<%- modelKey -%>.bulkCreate(ctx.request.body, {
    validate: true,
  });

  next();
};
<% } %>


<% if(model['x-apis'].includes('bulkUpdate')) { %>
/**
 * 更新多条信息
 */
const bulkUpdate = async (ctx, next) => {
  ctx.body = await model.<%- modelKey -%>.update(ctx.request.body.fields, {
    where: ctx.request.body.filter
  });

  next();
};
<% } %>


<% if(model['x-apis'].includes('updateByPk')) { %>
/**
 * 更新单条信息
 */
const updateByPk = async (ctx, next) => {
  const <%- modelKeyLower -%> = await model.<%- modelKey -%>.findByPk(ctx.params.id);
  ctx.assert(<%- modelKeyLower -%>, 404, "记录不存在");
  ctx.body = await <%- modelKeyLower -%>.update(ctx.request.body);

  next();
};
<% } %>


<% if(model['x-apis'].includes('bulkDestroy')) { %>
/**
 * 删除多条信息
 */
const bulkDestroy = async (ctx, next) => {
  ctx.body = await model.<%- modelKey -%>.destroy({
    where: ctx.request.body
  });

  next();
};
<% } %>


<% if(model['x-apis'].includes('destroyByPk')) { %>
/**
 * 删除单条信息
 */
const destroyByPk = async (ctx, next) => {
  const <%- modelKeyLower -%> = await model.<%- modelKey -%>.findByPk(ctx.params.id);
  ctx.assert(<%- modelKeyLower -%>, 404, "记录不存在");
  ctx.body = await <%- modelKeyLower -%>.destroy();

  next();
};
<% } %>


<% if(model['x-apis'].includes('findOne')) { %>
/**
 * 查询单条信息
 */
const findOne = async (ctx, next) => {
  const <%- modelKeyLower -%> = await model.<%- modelKey -%>.findOne({ where: ctx.query });
  ctx.assert(<%- modelKeyLower -%>, 404, "记录不存在");
  ctx.body = <%- modelKeyLower -%>;

  next();
};
<% } %>


<% if(model['x-apis'].includes('findOrCreate')) { %>
/**
 * 查询或创建单条信息
 */
const findOrCreate = async (ctx, next) => {
  const [<%- modelKeyLower -%>, created] = await model.<%- modelKey -%>.findOrCreate({
    where: ctx.request.body,
  });
  ctx.body = {
    // ...<%- modelKeyLower -%>.toJSON(),
    ...<%- modelKeyLower -%>.get({ plain: true }),
    created,
  };

  next();
};
<% } %>


export default {
  <% model['x-apis'].forEach(item=>{ -%>
  <%- item %>,
  <% }) -%>
};
