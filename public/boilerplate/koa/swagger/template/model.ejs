<%
  const modelKeyLower = modelKey.toLowerCase();
%>

import Sequelize from "sequelize";
import sequelize from "../db";
<% Object.entries(model.properties)
  .filter(([_,field])=>field['x-foreignKey'])
  .forEach(([_,field])=>{
    const refModelKey = field['x-ref'].replace('#/definitions/','');
%>
import <%- refModelKey -%> from "./<%- refModelKey -%>";
<% }) -%>

/**
 * <%- model.description %>
 */
export default sequelize.define(
  "<%- modelKeyLower -%>",
  {
    <% Object.entries(model.properties).filter(([_,field])=>!(field.$ref||(field.type==="array"&&(!field.items||field.items.$ref)))).forEach(([fieldKey,field])=>{ -%>
      <%- fieldKey -%>: {
        field: "<%- field['x-fieldName'] || fieldKey -%>",
        <% if (field.description) { -%>
        comment: "<%- field['x-description'] || field.description || null  -%>",
        <% } -%>
        <% if(field.$ref) { -%>
        type: Sequelize.<%- dataFormats['object'][0] -%>,
        <% } else if (field['x-foreignKey']) { -%>
        type: Sequelize.<%- dataFormats[field.format][0] -%><% 
          if(dataFormats[field.format][0]==='STRING'&&field['x-length']){ 
        -%>(<%- field['x-length'] -%>)<% } -%>,
        references: {
          model: <%- field['x-ref'].replace('#/definitions/','') -%>,
          key: "<%- field['x-refFieldKey'] -%>",
        },
        <% } else { -%>
        type: Sequelize.<%- dataFormats[field.format][0] -%>,
        <% } -%>
        <% if (field.format==='uuid' && field['x-primaryKey']) { -%>
        defaultValue: Sequelize.UUIDV4,
        <% } else if (field.default){ -%>
        defaultValue: <%- field.default -%>,
        <% } -%>
        <% if (field['x-primaryKey']) { -%>
        primaryKey: true,
        <% } -%>
        <% if (field.uniqueItems) { -%>
        unique: true,
        <% } -%>
        <% if (field["x-increment"]) { -%>
        autoIncrement: true,
        <% } -%>
        <% if (model.required && model.required.includes(fieldKey)) { -%>
        allowNull: false,
        <% } -%>
        validate: {
          <% if (model.required && model.required.includes(fieldKey)) { -%>
          notEmpty: true,
          <% } -%>
          <% if (field.minLength!==undefined && field.maxLength!==undefined) { -%>
          len: [<%- field.minLength -%>, <%- field.maxLength -%>],
          <% } -%>
          <% if (field.minimum) { -%>
          min: <%- field.minimum -%>,
          <% } -%>
          <% if (field.maximum) { -%>
          max: <%- field.maximum -%>,
          <% } -%>
          <% if (field.enum) { -%>
          isIn: [[<% field.enum.forEach(item=>{ -%> <%- JSON.stringify(item) -%>,<% }) -%>]],
          <% } -%>
          <% if (field.format==='date' || field.format==='date-time') { -%>
          isDate: true,
          <% } -%>
          <% if (field.format==='email') { -%>
          isEmail: true,
          <% } -%>
          <% if (field.format==='uri') { -%>
          isUrl: true,
          <% } -%>
        },
      },
    <% }) -%>
  },
  {
    underscored: <%- !!model['x-underscored'] -%>, // 下划线字段
    paranoid: <%- !!model['x-paranoid'] -%>, // 软删除
    freezeTableName: true, // 禁用表名自动复数
    tableName: "<%- model['x-tableName'] -%>", // 定义表的名称
  }
);
