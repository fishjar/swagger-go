<%
  const modelKeyLower = modelKey.toLowerCase();
  const modelAssociationsAll = associations.filter(item=>item.source===modelKey);
  const modelAssociationsMany = modelAssociationsAll.filter(item=>item.type==='belongsToMany');
  const modelAssociationsBelongs = modelAssociationsAll.filter(item=>item.type==='belongsTo');
%>
import enum

from flaskr import db, ma
from .Base import BaseModel, Column
# from werkzeug.exceptions import abort
# from werkzeug.security import generate_password_hash, check_password_hash


class <%- modelKey -%>(BaseModel):
    """ <%- model['description'] -%>
    """
    __tablename__ = "<%- modelKeyLower -%>"

<% Object.entries(model.properties).filter(([_,field])=>!(field.$ref||(field.type==="array"&&(!field.items||field.items.$ref)))).forEach(([fieldKey,field])=>{ 
	const isRequired = model.required && model.required.includes(fieldKey);
    const dbType = dataFormats[field.format][1];
-%>
	<%- fieldKey -%> = Column("<%- field['x-fieldName'] || fieldKey -%>", <% 
    if(field.enum) { 
    -%>db.Enum(<% field.enum.forEach(item=>{ -%> <%- JSON.stringify(item) -%>,<% }) -%>)<% 
    } else if(dbType==='String') { 
    -%>db.<%- dbType -%>(<%- field['x-length'] || '255' -%>)<% 
    } else {
    -%>db.<%- dbType -%><%
    }
    -%>, <%
    if (model.required && model.required.includes(fieldKey)) {
    -%>nullable=False, <% 
    } 
    -%>comment="<%- field['x-description'] || field.description || null  -%>")
<% }) -%>

class <%- modelKey -%>Schema(ma.ModelSchema):
    """ 鉴权模式
    """
    class Meta:
        model = <%- modelKey -%>
